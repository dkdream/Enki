(require "boot.ea")

dump

(dumpln (~ 1))
(dumpln "1")
(dumpln '1)
(dumpln (type-of 1))
(dumpln (type-of 'one))
(dumpln :symbol)
(dumpln nil)
(dumpln (type-of [1 2 3 4]))

(define ttest [1 2 3 4])

(dumpln 'x0 :integer (type-of 1))
(assert (iso 10 :integer (type-of 1)))

(dumpln 'x1  :text (type-of "1"))
(assert (iso 10 :text (type-of "1")))

(dumpln 'x2 :{symbol Symbol} (type-of 'val))
(assert (iso 10 :{symbol Symbol} (type-of 'val)))

(dumpln 'x3 (type-of nil))
(assert (iso 10 :{nil Zero}     (type-of nil)) "nil is not type :nil")

(dumpln 'x3a)
(assert (iso 10 nil             (ctor-of nil)) "nil is not constructed by nil")

(dumpln 'x4)
(assert (iso 10 'primitive       (ctor-of println)))

(dumpln 'x5)
(assert (iso 10 'fixed           (ctor-of let)))

(dumpln 'x6)
(assert (iso 10 'tuple           (ctor-of ttest)))

(dumpln 'x7)
(assert (iso 10 ttest            (ctor-of (type-of ttest :{iseq Zero}) 'fooness)))

(dumpln 'x8)
(assert (iso 10 'fooness         (ctor-of ttest)))

(dumpln 'x9)
(assert (iso 10 :{iseq Zero}     (type-of ttest)))

(define fooness 'fooness)

(assert (iso 10 :{symbol Symbol} (type-of fooness)))

(define barness :{barness Zero})

(assert (iso 10 :{Zero} (type-of barness)))

(define barness (lambda (ok)
                  (dumpln ok)
                  (println (type-of ok))
                  1
                  ))

(println (barness "testing"))

(let ((xxx 1)(yyy 2))
  (dumpln (environment 'current)))

