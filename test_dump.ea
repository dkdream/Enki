(require "boot.ea")

dump

(dumpln (~ 1))
(dumpln "1")
(dumpln '1)
(dumpln (type-of 1))
(dumpln (type-of 'one))
(dumpln :symbol)
(dumpln nil)
(dumpln (type-of [1 2 3 4]))

(define ttest [1 2 3 4])

(dumpln 'x0 :integer (type-of 1))
(assert (iso 10 :integer (type-of 1)))

(dumpln 'x1  :text (type-of "1"))
(assert (iso 10 :text (type-of "1")))

(dumpln 'x2 :symbol (type-of 'val))
(assert (iso 10 :symbol (type-of 'val)))

(dumpln 'x3 (type-of nil))
(assert (iso 10 :{nil Zero} (type-of nil)) "nil is not type :nil")

(dumpln 'x3a)
(assert (iso 10 'nil        (ctor-of nil)) "nil is not constructed by nil")

(dumpln 'x4)
(assert (iso 10 'primitive  (ctor-of println)))

(dumpln 'x5)
(assert (iso 10 'fixed      (ctor-of let)))

(dumpln 'x6)
(assert (iso 10 'tuple      (ctor-of ttest)))

(define ctest (ctor 'fooness :{iseq Zero} 1 2 3 4))

(dumpln 'x7 ctest (ctor-of ctest))
(assert (iso 10 'fooness (ctor-of ctest)))

(dumpln 'x8  ctest (sort-of ctest))
(assert (iso 10 :Zero (sort-of ctest)))

(dumpln 'x9 ctest (type-of ttest))
(assert (iso 10 :{iseq Zero} (type-of ctest)))

(define fooness 'fooness)

(dumpln 'x10 symbol (type-of fooness))
(assert (iso 10 symbol (type-of fooness)))

(define barness :{barness Zero})

(dumpln 'x11 :{Zero} (type-of barness))
(assert (iso 10 :{Zero} (type-of barness)))

(define barness (lambda (ok)
                  (dumpln ok)
                  (println (type-of ok))
                  1
                  ))

(define next
   (let (count)
      (bind count 0)
      (lambda () 
         (set count (+ 1 count))
         count)))

(dumpln 'y (next))
(println (barness "testing"))

(dumpln 'y (next))
(let ((xxx 1)(yyy 2))
  (dumpln (environment 'current)))

(dumpln 'y (next))
(define one   (Field 'one integer))
(define two   (Field 'two text))
(define three (Field 'three symbol))

(dumpln 'y (next))
(println one)
(dumpln (type-of one))

(println two)
(dumpln (type-of two))

(println three)
(dumpln  (type-of three))

(define r1 (Record one two))
(define r2 (Record two three))
(define r3 (Record one r2))

(dumpln 'y (next))
(dumpln (Unfold r1))
(dumpln (Unfold r2))
(dumpln (Unfold r3))

(dumpln 'y (next))
(dumpln (type-of r1))
(dumpln (type-of r2))
(dumpln (type-of r3))



