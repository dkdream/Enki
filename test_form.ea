
(define pair? (lambda (x) (= (type-of x) 'pair)))

(define car (lambda (x)
              (if (pair? x)
                  (element x 0)
                  nil)))

(define cdr (lambda (x)
              (if (pair? x)
                  (element x 1)
                  nil)))

(define cadr (lambda (x) (car (cdr x))))
(define cddr (lambda (x) (cdr (cdr x))))

(define concat-list
  (lambda (x y)
    (if (pair? x)
        (cons (car x) (concat-list (cdr x) y))
      y)))

(define expand-quote
  (let ((qq-list) (qq-element) (qq-object))
    (set qq-list (lambda (l)
                   (if (pair? l)
                       (let ((obj (car l)))
                         (if (and (pair? obj) (= (car obj) 'unquote-splicing))
                             (if (cdr l)
                                 (list 'concat-list (cadr obj) (qq-list (cdr l)))
                                 (cadr obj))
                             (list 'cons (qq-object obj) (qq-list (cdr l)))))
                       (list 'quote l))))
    (set qq-element (lambda (l)
                      (let ((head (car l)))
                        (if (= head 'unquote)
                            (cadr l)
                            (qq-list l)))))
    (set qq-object (lambda (object)
                     (if (pair? object)
                         (qq-element object)
                         (list 'quote object))))
    (lambda (expr)
      (qq-object expr))))


(define quasiquote (form expand-quote))

(dumpln  (let ((%define 'define)
               (name 'fooness)
               (args '(one two three))
               (body '(anda one anda two)))
           `(,%define ,name (lambda ,args ,@body))))

(define %define-with (lambda (%define)
                       (lambda (pattern . body)
                         (if (pair? pattern)
                             (let ((name (car pattern))
                                   (args (cdr pattern)))
                               `(,%define ,name (lambda ,args ,@body)))
                             `(,%define ,pattern ,@body)))))

(define %define-kind (lambda (%define %kind)
                       (lambda (pattern . body)
                         (if (pair? pattern)
                             (let ((name (car pattern))
                                   (args (cdr pattern)))
                               `(,%define ,name (,%kind (lambda ,args ,@body))))
                             `(,%define ,pattern (,%kind ,@body))))))

(define expand-define (%define-with define))
(define expand-macro  (%define-kind define form))

(dumpln (apply expand-define
         '((list-length list)
           (if (pair? list)
               (+ 1 (list-length (cdr list)))
               0))))

(dumpln (apply expand-define '(x y z)))

(define define (form expand-define))

(dumpln (apply expand-macro
               '((begin . body)
                 `(let () ,@body))))

(define macro (form expand-macro))

(macro (begin . body)
  `(let nil ,@body))

(begin 
  (print 1)
  (print 2)
  (println 3))
       
