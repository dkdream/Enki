
(define cadr (lambda (x) (car (cdr x))))
(define cddr (lambda (x) (cdr (cdr x))))

(define concat-list
   (lambda (x y)
      (if (pair? x)
            (cons (car x) (concat-list (cdr x) y))
         y)))

(mark-time 1)

(define expand-quote
   (let ((qq-list) (qq-element) (qq-object))
      (set qq-list (lambda (l)
                      (if (pair? l)
                            (let ((obj (car l))
                                  (rst (cdr l)))
                               (if (and (pair? obj)
                                        (== (car obj) 'unquote-splicing))
                                     (let ((value (cadr obj)))
                                        (if rst
                                              (new-list 'concat-list value (qq-list rst))
                                           value))
                                  (new-list 'cons (qq-object obj) (qq-list rst))))
                         (new-list 'quote l))))
      (set qq-element (lambda (l)
                         (let ((head (car l)))
                            (if (== head 'unquote)
                                  (cadr l)
                               (qq-list l)))))
      (set qq-object (lambda (object)
                        (if (pair? object)
                              (qq-element object)
                           (new-list 'quote object))))
      qq-object))

(mark-time 2)

(define quasiquote (form expand-quote))

(dumpln (let ((%define 'define)
              (name 'fooness)
              (args '(one two three))
              (body '(and one anda two)))
           `(\%define \name (lambda \args \@body))))


(mark-time 3)

(define %define-with (lambda (%define)
                        (lambda (pattern . body)
                           (if (pair? pattern)
                                 (let ((name (car pattern))
                                       (args (cdr pattern)))
                                    `(\%define \name (lambda \args \@body)))
                              `(\%define \pattern \@body)))))


(mark-time 4)

(define %define-kind (lambda (%define %kind)
                        (lambda (pattern . body)
                           (if (pair? pattern)
                                 (let ((name (car pattern))
                                       (args (cdr pattern)))
                                    `(\%define \name (\%kind (lambda \args \@body))))
                              `(\%define \pattern (\%kind \@body))))))


(mark-time 5)

(define expand-define (%define-with define))

(mark-time 7)

(define expand-macro  (%define-kind define form))

(mark-time 8)

(define define (form expand-define))
(define macro  (form expand-macro))

(dumpln (apply expand-define
               '((list-length list)
                 (if (pair? list)
                       (+ 1 (list-length (cdr list)))
                    0))))

(mark-time 9)

(define (list-length-cooked list)
   (if (pair? list)
         (+ 1 (list-length-cooked (cdr list)))
      0))

(dumpln "cooked list-length" (list-length-cooked '(1 2 3 4)))

(mark-time 10)

(dumpln (apply expand-define '(x y z)))

(mark-time 11)

(dumpln (apply expand-macro
               '((begin . body)
                 `(let () \@body))))



(macro (begin . body)
   `(let () \@body))

(begin 
   (print 1)
   (print 2)
   (println 3))

(dumpln "End")
