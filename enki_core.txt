<core> = <object>
       | <name>
       | <construct>
       | <control>
       | <context>
       | <binding>
       | <enviroment>
       | <filter>
       | <reflector>
       | <predicate>
       | (<core> <core>*)

<constructor> = (lambda <arguments> <return>? <core>+)
              | (thunk <return>? <core>+)
              | (<formula> <parameters> <core>+)
              | (self <core> <core>)                  -- self type (a singleton subset type)
              | (index <integer> <core>)              -- index type (tuple element type) 
              | (label <symbol> <core>)               -- label type (record element type)
              | (fiber <core>* <core>)                -- this is like a block
              | (timer <core> <core>)                 -- arg1 is an interval, arg2 is start second)
              | (conduit <core>)                      -- arg1 is a type
              | (delay <core> <core>)                 -- arg1 is a type, arg2 is expr
              | (ctor <name> <core> <core>*)          -- name is a ctor, arg1 is type
              | (type <core> <core> <core>*)          -- arg1 is a sort, arg2 is a list of constructor symbols
              | (syntax <name> <name> <core>* <core>) -- name1 is input, name2 is output
              | <quote>

<control> = (if <core> <core> <core>*)
          | (unless <core> <core> <core>*)
          | (case <core> <ctor-pattern>* <tuple-pattern>* <else-pattern>)
          | (select <action-pattern>* <else-pattern>)
          | (depart <core> <core>+)   -- if arg1 is a  one-shot-continuation call it with arg2..argn

<context> = (constrain <locals> <core>+)
          | (fix <parameters> <core>+)
          | (let <parameters> <core>+)

<binding> = (bind <name>+ <core>) -- bind a collecton of names to the output of expression
          | (set <name>+ <core>)  -- set a collecton of names to the boxed output of expression

<enviroment> = (define <name> <core>)
             | (effect <core>)            -- 
             | (require <object> <name>?) -- load a library of this

<filter> = (cast <core> <core> <core>?) -- arg1 is a type, arg2 is expr, [arg3 is an error handler]

<reflector> = (ctor-of <core>)  -- arg is object -> constructor symbol
            | (type-of <core>)  -- arg is object -> type of object
            | (sort-of <core>)  -- arg is object -> sort of object
            | (domain <core>)   -- arg is lambda.type -> input type
            | (codomain <core>) -- arg is lambda.type -> output type

<predicate> = (ctor? <core> <core>)       -- arg1 is object, arg2 is constructor symbol
            | (type? <core> <core>)       -- arg1 is object, arg2 is container
            | (sort? <core> <core>)       -- arg1 is object, arg2 is universe
            | (iso? <core> <core> <core>) -- arg1 is depth,  arg2 is object.1, arg3 is object.2
            | (subset? <core> <core>)     -- arg1 is subset,   arg2 is superset 
            | (eq? <core> <core>)         -- arg1 is object.1, arg2 is object.2

-    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -

<formula> = pi | sigma | any | all | subset | mu | exists

<quote>      = '<core>

<parameters> = <locals>? <return>? <initialize>+
<locals>     = [with <local>+ ]
<local>      = <name> <core>
             | <name> _

<arguments>  = [ <argument>+ ]
             | <name>               # infered-typ
<argument>   = <name> <core>  # name declared-type 
             | <name> _       # name infered-type
             | _      <core>  # slot declared-type 

<initialize> = [bind <name>+ <core>]
             | [set <name>+ <core>]

<return> = [as <name> <core>*] -- define name as the one-shot-continuation for this lambda

<action-pattern>  = <fiber-pattern> | <timer-pattern> | <conduit-pattern>

<timer-pattern>   = (alarm <core> <core>*)
<fiber-pattern>   = (done <core> <core>*)
<conduit-pattern> = (recieve <name> <core> <core>*)
                  | (send <name> <core> <core>*)

<ctor-pattern>  = (<name> <variables> <core>)
<tuple-pattern> = (_ <variables> <core>)
<variables>     = <arguments>
                | <name>

<else-pattern>  = (. <core>)

-    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -

<object> := a literal value
<name>   := a name 

-    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -

lambda    := construct a function/procedure value  (lambda/Pi[?:?]/?sort)
:         := ':' type expression
pi        := construct a dependent function type   (pi/?sort/?sort)
sigma     := construct a dependent tuple type      (sigma/?sort/?sort)
any       := construct a dependent union           (any/?sort/?sort)
all       := construct a dependent intersection    (all/?sort/?sort)
subset    := construct a dependent subtype         (subset/?sort/?sort)
mu        := construct a dependent recursive type  (mu/?sort/?sort)
index     := construct an index type               (index/?sort/?sort)
label     := construct a labeled type              (label/?sort/?sort)
fiber     := construct a fiber value               (fiber/Fiber/Zero)
timer     := construct a timer value               (timer/Timer/Zero)
conduit   := construct a conduit value             (conduit/Conduit[?]/Zero)
delay     := construct a lazy value                (delay/Lazy[?type]/?sort)
ctor      := construct a compound value            (?ctor/?type/?sort)
type      := construct a type                      (type/?sort/?sort)
syntax    := construct a syntax function           (macro/Pi[ASTree:ASTree]/Symbol)
'         := construct (quote) a syntax tree value (quote/ASTree/Symbol)
if        := 'if' control flow expression
unless    := 'unless' control flow expression
case      := 'case' control flow expression
select    := 'select' control flow expression
depart    := 'depart' control flow expression
constrain := 'constrain' context expression
let       := 'let' context expression
fix       := 'fix' context expression
bind      := 'bind'   binding expression (declared -> bound)
set       := 'set'    binding expression (bound -> boxed)
define    := 'define'  binding expression
effect    := 'effect'  event expression
require   := 'require' binding expression
cast      := 'cast' type flow expression
ctor-of   := function returns the constructor of a value
type-of   := function returns the type of a value
sort-of   := function returns the sort of a value
ctor?     := the 'ctor?'   predicate function (predicate/Pi[_,_:Boolean]/?sort)
type?     := the 'type?'   predicate function (predicate/Pi[_,_:Boolean]/?sort)
sort?     := the 'sort?'   predicate function (predicate/Pi[_,_:Boolean]/?sort)
iso?      := the 'iso?'    predicate function (predicate/Pi[_,_:Boolean]/?sort)
subset?   := the 'subset?' predicate function (predicate/Pi[_,_:Boolean]/?sort)
eq?       := the 'eq?'     predicate function (predicate/Pi[_,_:Boolean]/?sort)
alarm     := the 'alarm' timer pattern
done      := the 'done' fiber pattern
recieve   := the 'recieve' conduit pattern
send      := the 'send' conduit pattern

-  =  -  =  -  =  -  =  -  =  -  =  -  =  -  =  -  =  -  =  -  =  -  =  -  =  -  =  -  =  -

+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+ 
| = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = |
+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+

note: define dose NOT make a boxed type, therefore

(define one 1)
(define two (lambda () (+ one one)))
(println (two)) -- prints: 2
(define one 2)
(println (two)) -- prints: 2
(define two (lambda () (+ one one)))
(println (two)) -- prints: 4

- - - - - - - - - - - - - - - - - - - - - 

(sigma  (a : A) (B a)) == { (a, b) | a \in A && b \in (B a) }
(pi     (a : A) (B a)) == { f      | f \subset (sigma (a [A]) (B a)) && f \in Function }
(any    (a : A) (B a)) == { b      | b \in Union{x \in A}(B x) }
(all    (a : A) (B a)) == { b      | b \in Intercection{x \in A}(B x) }
(subset (a : A) (B a)) == { (a, b) | a \in A && b \subset (B a) }

- - - - - - - - - - - - - - - - - - - - - 

(cast : A x) == runtime type check

- - - - - - - - - - - - - - - - - - - - - 

(par <core>) -- evaluate an expression in parallel

- - - - - - - - - - - - - - - - - - - - - 

Pattern Matching on Lists: http://www.erlang.org/course/sequential_programming.html
/* in erlang list are [...] and tuples are {...} */
[A,B|C] = [1,2,3,4,5,6,7]
-- Succeeds - binds A = 1, B = 2,
--                  C = [3,4,5,6,7]
{A,_,[B|_],{B}} = {abc,23,[22,x],{22}}
-- Succeeds - binds A = abc, B = 22

- - - - - - - - - - - - - - - - - - - - - 
Happens Before: http://golang.org/ref/mem

let v be a variable then
  bind(v,y)  is defined as the event that writes to the variable v its first value y and marks it visible
  read(x,v)  is defined as the event that reads from the variable v into the registor x
  set(v,y)   is defined as the event that writes to the variable v its the next value y
  fini(v)    is defined as the event that marks the variable v as hidden

let e,e' be events then
  before(e,e') is defined as the parital order (e happens-before e').
  1) before(e,e') == true,       if e happens-before e'
  2) before(e,e') == concurrent, if e happens-concurrently with e'
  3) before(e,e') == false,      if before(e',e) == true, 

A read r of a variable v can not happen before an init i of that variable
  * before(i,r) == true then read
A read of a variable v can not happen after a fini of that variable  
  * before(f,r) == true then disallow read

A read r of a variable v is allowed to observe a write w to v if both of the following hold:
 1. before(r,w) != true
 2. forall write w' then before(w',w) == true

the life cycle of a variable is:
 1. init(v,x) the first write event.
 2. zero or more : read(x,v) or write(v,y)
 3. fini(v) the final write event 
    -- after this only writes are possible

each fiber is annotated with the variable its uses.
a fiber is not started until all its variables are init-ed.
a variable can only be fini-ed when all the fiber the use it exit.

example:

(let [a int b string c fiber d symbol]
     [bind c (fiber (print b a))]
     [bind a 1]
     [bind b "a ="]
     [bind d 'one]
     (print "ok"))

the fiber c will not start until after d is bound 
and the context (a,b,c,d) will not be GC-ed until after both the let and the fiber exit.

- - - - - - - - - - - - - - - - - - - - - 

let c be a conduit then
  init(c)      is defined as the event that created the conduit
  send(c,x)    is defined as the event that writes to the conduit the value of the variable x
  recieve(y,c) is defined as the event that reads from the conduit a value into the variable y
  fini(c)      is defined as the event that closes the conduit

the life cycle of a conduit is:
  1. init(c)
     -- before this no events are possible
  2. for every recieve r there must be a send s such that before(s,r) == true
  3. fini(c)
     -- after this only recieve are possible

- - - - - - - - - - - - - - - - - - - - - 
Composible Types

-- construct a member of an indexed type
-
(subset [a A] (pred a))  -- subset type                (forall x in A where (pred a))
(self A expr)            -- self type (singleton type) (forall x in A where (eq? x expr))
 
-- combined and indexed type
-
(pi [a A] (B a))         -- depended lambda type - set of functions to an indexed type
(exists [a A] (B a))     -- existential type - select a member of an indexed typ
(sigma  [a A] (B a))     -- dependent tuple type - B is an indexed type
(any [a A] (B a))        -- dependent union type - B is an indexed type
(all [a A] (B a))        -- dependent intersection type - B is an indexed type

(mu [a A] (B a))         -- recursive subset type

(pi A B)    -- lambda type
(sigma A B) -- tuple type
(any A B)   -- union type
(all A B)   -- intersection type

(all A A)                       <-> A
(all A (mu [a A] (B a)))        <-> (mu [a A] (B a))
(all A (subset [a A] (pred a))) <-> (subset [a A] (pred a))
(all A (self A expr))           <-> (self A expr)

(any A A)                       <-> A
(any A (mu [a A] (B a)))        <-> A
(any A (subset [a A] (pred a))) <-> A
(any A (self A expr))           <-> A

(self A expr)                              -> (subset [a A] (eq? a expr))
(self (pi [a A] (B a)) expr)               -> (pi [a A] (self (B a) (expr a)))
(subset [f (pi [a A] (B a))] (eq? f expr)) -> (pi [a A] (subset [b (B a)] (eq? b (expr a))))


(subset? (self A expr) A) -> true
(subset? (all A B) A)     -> true
(subset? A A)             -> true

(domain (pi A B))               -> A
(domain (pi [a A] (B a)))       -> A
(domain (pi [a A] B (C a)))     -> (sigma A B)
(domain (pi [a A] [b (B a)] C)) -> (sigma [a A] (B a))

(codomain (pi A B))         -> B
(codomain (pi [a A] (B a))) -> (exists [a A] (B a))

----------------------------------

(thunk [as foo int string type]
       ...
       (depart foo 1 "test" Integer))

->

(thunk (marker [as foo int string type]
               ...     
               (depart foo 1 "test" Integer)))

- - -

(lambda (one two three) 
        (+ one two three))

->

(lambda [one _ two _ three _]
        (marker result
                (depart result (+ one two three))))
        
