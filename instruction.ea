##
## 
##
(define (instruction command . list)
   (type-of (tuple command list) :instruction)

##
##
##
(define (label name)
   (type-of (tuple name) :label)

##
## flatten a nested collection of statements into a linear list
##
(define (flatten statements)
   (let ((head (car statements))
         (tail (cdr statements)))
      (if (pair? head)
            (append (flatten head) (flatten tail))
         (cons head (flatten tail)))))

##
## construct a sequence that needs 
##
(define (sequence needs modifies . list)
   (if (and (all? needs 'symbol)
            (all? modified 'symbol))
         (let ((statements (flatten list)))
            (if (all? :instruction statements)
                  (type-of (tuple needs modifies statements) :sequence)
               (error 'SEQUENCE "non-instruction in statements")))
      (error 'SEQUENCE "non-symbol in needs or modifies")))

##
## dose this sequence need this symbol?
##
(define (needs-register? sequence register)
   (if (isA? sequence :sequence)
         (if (isA? register 'symbol)
               (member register (element sequence 0))
            (error 'NEED "non-symbol used"))
      (error 'NEED "non-sequence used")))

##
## dose this sequence modify this symbol?
##
(define (modifies-register? sequence register) 
   (if (isA? sequence :sequence)
         (if (isA? register 'symbol)
               (member register (element sequence 1))
            (error 'MODIFY "non-symbol used"))
      (error 'MODIFY "non-sequence used")))

##
## construct the union of two lists
##
(define (union alist blist)
   (if (nil? alist)
         blist
      (let ((head (car alist))
            (tail (cdr alist)))
         (if (member head blist)
               (union tail blist)
            (cons head (union tail blist))))))

##
## construct the list without some elements
##
(define (difference list minus)
   (if (nil? list)
         nil
      (let ((head (car list))
            (tail (cdr list)))
         (if (member head minus)
               (difference tail minus)
            (cons head (difference tail minus))))))

##
## define the empty-sequence
##
(define empty-sequence (sequence nil nil))

##
## append two sequences
##
(define (append-sequence first next)
   (sequence (union (element first 0)
                    (difference (element next 0)
                                (element first 1)))
             (union (element first 1)
                    (element next 1))
             (element first 2)
             (element next 2)))

##
## append two sequences while preserving some registers
##
(define (append-preserving registors first next)
   (if (nil? registors)
         (append-sequence first next)
      (let ((register (car registors)))
         (if (and (needs-register? first register)
                  (modifies-register? next register))
               (preserving (cdr regs)
                           (sequence (union (list register) (element first 0))
                                     (difference (element first 1) (list register))
                                     (instruction 'save register)
                                     (element first 2))
                           next)
            (preserving (cdr regs) first next)))))

##
## append two sequences treating body as if no registers are changed
##
(define (tack-on head body)
   (sequence (element head 0)
             (element head 1)
             (element head 2)
             (element body 2)))

##
## construct a sequence that gotos the next instruction 
## examples:
##    return from call (return)
##    to the else block in an if statement (goto)
##    to the block after this block (next)
##
(define (compile-linkage linkage)
   (cond ((== 'return linkage) (sequence nil nil (instruction 'return)))
         ((== 'next linkage)   empty-sequence)
         (else                 (sequence nil nil (instruction 'goto linkage)))))


(define (make-lambda-bindings parameters))
(define (make-let-bindings bindings))
(define (needs-register? sequence register)    (member register (element sequence 0)))
(define (modifies-register? sequence register) (member register (element sequence 1)))
(define (compile-const value target linkage))
(define (compile-type value target linkage))
(define (compile-global name value target linkage))
(define (compile-choose test on_true on_false target linkage))
(define (compile-first-true first next))
(define (compile-first-false first next))
(define (compile-sequence first next target linkage))
(define (compile-make-lambda vars body))
(define (compile-apply function args))
(define (compile-recall label))
(define (compile-local label value))

(define (compile-block args target linkage)
   (if (nil? args)
         (compile-const nil target linkage)
      (if (nil? (cdr args))
            (compiler (car args) target linkage)
         (compile-sequence (compiler (car args) 'void 'next)
                           (compile-block (cdr args) target linkage)))))

(define (compile exp frame target linkage)
   (let (cbegin make-let-bindings)
      ## make-let-bindings - create and extended enviroment
      ## control-compiler - convert a control-tree structure into a value
      (set cbegin (find-value 'begin controls))
      (set (control-compiler control args)
           (let (check name)
              (set name (control-name control))
              (set (check symbol) (== symbol name))
              (cond ((check 'define) (compile-global (car args) (car (cdr args))))
                    ((check 'quote)  (compile-const (car args) ))
                    ((check 'type)   (compile-type args))
                    ((check 'if)     (compile-choose (compiler (car args) 'test 'next)
                                                     (control-block (car (cdr args)))
                                                     (control-block (cdr (cdr args)))
                                                     ((check 'unless) (compile-choose (compiler (car args) 'test 'next)
                                                                                      (compile-block (cdr (cdr args)))
                                                                                      (compile-block (car (cdr args)))))
                                                     ((check 'and)    (if (nil? args)
                                                                            (compile-constant true)
                                                                         (if (nil? (cdr args))
                                                                               (compiler (car args) target linkage)
                                                                            (compile-first-true (compiler (car args))
                                                                                                (control-compiler control (cdr args))))))
                                                     ((check 'or)     (if (nil? args)
                                                                            (compiler-constant nil)
                                                                         (if (nil? (cdr args))
                                                                               (compiler (car args) target linkage)
                                                                            (compile-first-false (compiler (car args))
                                                                                                 (control-compiler control (cdr args))))))
                                                     ((check 'set)   (compile-local (car args)
                                                                                    (compiler (car (cdr args)))))
                                                     ((check 'begin)  (compile-block args)
                                                      ((check 'lambda) (compile-make-lambda (car args)
                                                                                            (compiler (cons cbegin (cdr args))
                                                                                                      'result
                                                                                                      'return)))
                                                      ((check 'apply)  (let ((fproc (compiler (car args)))
                                                                             (vals  (map compiler (car (cdr args)))))
                                                                          (lambda (env)
                                                                             (execute (fproc env)
                                                                                      (map (lambda (aproc) (aproc env)) vals)))))
                                                      )))
                    (cond ((primitive? exp) (compile-constant exp))
                          ((control?   exp) (compile-constant exp))
                          ((symbol?    exp) (compile-recall exp))
                          ((pair?      exp) (control-compiler capply exp))
                          ((tuple?     exp) (compile-constant exp))
                          ((text?      exp) (compile-constant exp))
                          ((integer?   exp) (compile-constant exp))
                          ((nil?       exp) (compile-constant exp))
                          ((comma?     exp) (error 'COMPILER "comma not supported (yet)" exp))
                          ((semi?      exp) (error 'COMPILER "semi not supported (yet)" exp))
                          ((block?     exp) (error 'COMPILER "block not supported (yet)" exp))
                          (else exp)))
