##
## assembler instruction
##
(define (instruction command . list) (type-of (tuple command list) :instruction)

##
##  assembler label
##  examples:
##     (label '.LC0)     -> .LC0:
##     (label 's_lambda) -> s_lambda:
##
(define (label name) (type-of (tuple name) :label)

##
##  assembler instruction
##  examples: 
##     (directive 'string "xxx") -> .string "xxx"
##     (directive 'type 'init_global_symboltable '@function)  -> .type   init_global_symboltable, @function
##
(define (directive name . args) (type-of (tuple name args) :directive)

##
##  assembler declaration (ie .globl name)
##  examples:
##     (declaration 'init_global_symboltable) -> .globl init_global_symboltabl
##
(define (declaration name) (type-of (tuple name args) :declaration)


##
## flatten a nested collection of statements into a linear list
##
(define (flatten statements)
   (let ((head (car statements))
         (tail (cdr statements)))
      (if (pair? head)
            (append (flatten head) (flatten tail))
         (cons head (flatten tail)))))

##
## construct a sequence that needs 
##
(define (sequence . statements)
   (type-of (tuple (flatten statements)) :sequence))

##
## construct the union of two lists
##
(define (union alist blist)
   (if (nil? alist)
         blist
      (let ((head (car alist))
            (tail (cdr alist)))
         (if (member head blist)
               (union tail blist)
            (cons head (union tail blist))))))

##
## construct the list without some elements
##
(define (difference list minus)
   (if (nil? list)
         nil
      (let ((head (car list))
            (tail (cdr list)))
         (if (member head minus)
               (difference tail minus)
            (cons head (difference tail minus))))))

##
## define the empty-sequence
##
(define empty-sequence (sequence))

##
## append two sequences
##
(define (append-sequence . list)
   (let (join append)
      (bind (join first next)
            (sequence (element first 0)
                      (element next 0)))
      (bind (combined first rest)
            (if (nil? rest)
                  first
               (join first (combined (car rest) (cdr rest)))))
      (if (nil? list)
            empty-sequence
         (combined (car list) (cdr list))))

##
## the instructions to make a lambda using label as the machine code address
## and set the target registor to the lambda object
##
(define (make-lambda label target))

##
## construct a sequence that gotos the next instruction 
## examples:
##    return from call (return)
##    to the else block in an if statement (goto)
##    to the block after this block (next)
##
(define (compile-linkage linkage)
   (cond ((== 'return linkage) (sequence (instruction 'return)))
         ((== 'next linkage)   empty-sequence)
         (else                 (sequence (instruction 'goto linkage)))))

##
## link a test-sequence with a jump to on_true or on_false 
##
(define (link-choice test on_true on_false)
   (let ((flabel (new-label))
         (treg (cpu-registor 'test)))
      (append-sequence test
                       (sequence (instruction 'test treg treg)
                                 (instruction 'jz flabel))
                       on_true
                       (sequence (label flabel))
                       on_false)))

##
## link[ first, jump-on-false(target,label), linkage, label: rest }
##
(define (link-first-true first rest target linkage))

##
## link[ first, jump-on-true(target,label), linkage, label: rest }
##
(define (link-first-false target first rest target linkage))

##
## compile global assignment
##
(define (compile-global name value env target linkage)
   (let ((greg (global-registor name)))
      (append-sequence (compile value env greg 'next)
                       (sequence (instruction 'mov greg target))
                       (compile-linkage linkage))))

##
## compile a the construction of a constant value (anything that reader.c can make)
##
(define (compile-const value env target linkage))

##
## compile a the construction of a type value
##
(define (compile-type value env target linkage))

##
## compile a block of code where only the last value is return.
##
(define (compile-block args env target linkage)
   (if (nil? args)
         (compile-const nil env target linkage)
      (if (nil? (cdr args))
            (compiler (car args) env target linkage)
         (append-sequence (compiler (car args) env (cpu-registor 'test) 'next)
                          (compile-block (cdr args) env target linkage)))))

##
## compile a value and assign it to a local var
##
(define (compile-local label value env target linkage)
   (let ((lreg (find-registor label)))
      (if (isA? lreg :global-registor)
            (error 'BIND-ERROR (format "undefined local name @{d}" label))
         (append-sequence (compiler value env lreg 'next)
                          (sequence (instruction 'mov lreg target))
                          (compile-linkage linkage)))))

##
## compile a lambda value
##
(define (compile-lambda vars body env target linkage)
   (let ((start  (new-label))
         (after  (new-label))
         (nested (cons (lambda-frame vars) env)))
      (append-sequence (sequence (instruction 'jmp after)
                                 (label start))
                       (compile-block body nested (cpu-registor 'return) 'return)
                       (sequence (label after))
                       (make-lambda start target)
                       (compile-linkage linkage))))

##
## compile a let block
##
(define (compile-let bindings body env target linkage))

##
## compile a function application
##
(define (compile-apply function args env target linkage))

##
## compile a variable recall
##
(define (compile-recall label env target linkage)
   (let ((register (frame-registor env label)))
      (append-sequence (sequence registor nil (instruction 'mov registor target))
                       (compile-linkage linkage))))


##
## compile a (fixed) operator
##
(define (control-compiler control args env target linkage)
   (let (check name treg)
      (bind treg (cpu-registor 'test))
      (bind name (control-name control))
      (bind (check symbol) (== symbol name))
      (cond ((check 'define) (compile-global (car args) (car (cdr args)) env target linkage))
            ((check 'quote)  (compile-const (car args) env target linkage))
            ((check 'type)   (compile-type args env target linkage))
            ((check 'if)     (link-choice (compiler (car args) env treg 'next)
                                          (control-block (car (cdr args)) env target linkage)
                                          (control-block (cdr (cdr args)) env target linkage)))
            ((check 'unless) (link-choice (compiler (car args) env treg 'next)
                                          (compile-block (cdr (cdr args)) env target linkage)
                                          (compile-block (car (cdr args)) env target linkage)))
            ((check 'and)    (if (nil? args)
                                   (compile-const true env target linkage)
                                (if (nil? (cdr args))
                                      (compiler (car args) env target linkage)
                                   (link-first-true (compiler (car args) env target 'next)
                                                    (control-compiler control (cdr args) env target linkage)))))
            ((check 'or)     (if (nil? args)
                                   (compiler-constant nil env target linkage)
                                (if (nil? (cdr args))
                                      (compiler (car args) env target linkage)
                                   (link-first-false (compiler (car args) env target 'next)
                                                     (control-compiler control (cdr args) env target linkage)))))
            ((check 'set)    (compile-local (car args) (car (cdr args)) env target linkage))
            ((check 'begin)  (compile-block args env target linkage))
            ((check 'lambda) (compile-lambda (car args) (cdr args) env target linkage))
            ((check 'let)    (compile-let    (car args) (cdr args) env target linkage))
            ((check 'apply)  (compile-apply  (car args) (cdr args) env target linkage))
            )))

(define (compile exp env target linkage)
   (let (capply)
      (bind capply (find-value 'apply controls))
      (cond ((primitive? exp) (compile-const exp env target linkage))
            ((control?   exp) (control-compiler (control-directive exp) (control-args exp) env target linkage))
            ((symbol?    exp) (compile-recall exp env target linkage))
            ((pair?      exp) (control-compiler capply exp env target linkage))
            ((tuple?     exp) (compile-const exp env target linkage))
            ((text?      exp) (compile-const exp env target linkage))
            ((integer?   exp) (compile-const exp env target linkage))
            ((nil?       exp) (compile-const exp env target linkage))
            ((comma?     exp) (error 'COMPILER "comma not supported (yet)" exp))
            ((semi?      exp) (error 'COMPILER "semi not supported (yet)" exp))
            ((block?     exp) (error 'COMPILER "block not supported (yet)" exp))
            (else exp))))
