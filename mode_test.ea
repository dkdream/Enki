#!/bin/xx

(require "boot.ea")

(dumpln (~ 1))
(dumpln "1")
(dumpln '1)
(dumpln (type-of '1))
(dumpln nil)

(assert (iso 'integer   (type-of 1)))
(assert (iso 'text      (type-of "1")))
(assert (iso 'symbol    (type-of 'val)))
(assert (iso nil        (type-of nil)))
(assert (iso 'primitive (type-of println)))
(assert (iso 'fixed     (type-of let)))

"`word 'word @word .word &word :word let assert"

`one-word
'one-word
@one-word
.one-word
&one-word
:one-word

(abort one)
(require one)

### this
    ### is 

## this is a test 
## one two
#[
xxx
]#

`(one two three)
'(one two three)

(define (fooness bar two three)
   (one two three))

(macro (fooness bar two three)
   (one two three))

(let one ((two three)))

(let* one ((two  three)))
(letrec one ((two  three)))

(let ((two three))
   (foo bar))

(let*   ((two three)))
(letrec ((two three)))

(define fooness 'fooness)

(define barness 
   (lambda ()
      (dumpln ok)
      (println (type-of ok))
      1
      ))

(define barness (lambda bar
                   ## test                   
                   (dumpln ok)
                   (println (type-of ok))))

(define barness (lambda (bar and)
                   (dumpln ok)
                   (println (type-of ok))))

(define barness (lambda (bar . and)
                   (dumpln ok)
                   (println (type-of ok))))

(println (barness "testing\n\""))

(let ((xxx 1)(yyy 2))
   (dumpln (environment 'current)))

(define foo bar)

(fooness
 one
 two
 three)

(begin
   one
   two
   three)

(if (test)
      (one)
   (two))

(unless
      (test)
   (one)
   (two))

(progn
   one
   two
   three)

(prog1
      one
   two
   three)

(prog2
      one
      two
   three)

