(require "boot.ea")

(dumpln (~ 1))
(dumpln "1")
(dumpln '1)
(dumpln (type-of '1))
(dumpln nil)

(assert 'integer   (type-of 1))
(assert 'text      (type-of "1"))
(assert 'symbol    (type-of 'val))
(assert nil        (type-of nil))
(assert 'primitive (type-of println))
(assert 'fixed     (type-of let))

`one
'one
.word

#this is a test

`(one two three)
'(one two three)

(define (fooness bar two three)
        (one two three))

(macro (fooness bar two three)
       (one two three))


(let one ((two three)))
         
(let* one ((two  three)))
(letrec one ((two  three)))

(let    ((two three)))
(let*   ((two three)))
(letrec ((two three)))

(define fooness 'fooness)
(define barness (lambda ()
                        (dumpln ok)
                        (println (type-of ok))
                        1
                        ))

(define barness (lambda bar
                 (dumpln ok)
                 (println (type-of ok))
                 1
                 ))

(define barness (lambda (bar and)
                        (dumpln ok)
                        (println (type-of ok))
                        1
                        ))

(define barness (lambda (bar . and)
                        (dumpln ok)
                        (println (type-of ok))
                        1
                        ))

(println (barness "testing\n\""))

(let ((xxx 1)(yyy 2))
  (dumpln (environment 'current)))
