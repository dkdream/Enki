(require "boot.ea")

##
## Fixed Operators
##  define, quote, type, if, and, or, bind, set, delay, while, begin, let, lambda
##


##
## find-value modelled after (kernal.c:eval_symbol)
##
(define (find-value symbol context)
   (let (match entry)
      (bind match (lambda (binding) (== (element binding 0) symbol)))
      (bind entry (find match context))
      (if (nil? entry)
            (find-value symbol (environment))
         (element entry 1))))

##
## make-bindings modelled after (kernal.c:apply_lambda)
##
(define (make-bindings formals args closure)
   (if (nil? formals) 
         closure
      (if (pair? formals)
            (cons (cons (car formals) (car args))
                  (make-bindings (cdr formals) (cdr args) closure))
         (cons (cons formals args) closure))))

##
## expander modelled after (apply.c:expand)
##
(define (expander exp env)
   (let (expand-list do-expand apply-form)
      (bind do-expand 
           (lambda (item)
              (expander item env)))
      (bind expand-list
           (lambda (exp)
              (let ((head (expander (car exp) env))
                    (tail (cdr exp)))
                 (cond ((== head 'quote) (cons head tail))
                       ((== head 'type)  (cons head tail))
                       ((symbol? head)   (let ((value (find-value head env)))
                                            (if (form? value)
                                                  (apply-form value tail)
                                               (cons head (map do-expand tail)))))
                       (else (cons head (map do-expand tail)))))))
      (bind apply-form
           (lambda (form args)
              (let ((action (form-action form)))
                 (if (nil? action)
                       (map do-expand args)
                    (application action args env)))))
      (cond ((pair? exp) (expand-list exp))
            (else        exp))))

##
## encoder modelled after (apply.c:encode)
##
(define (encoder exp env)
   (let (encode-list do-encode apply-encoder)
      (bind encode-list
           (lambda (exp)
              (let ((head (encoder (car exp) env))
                    (tail (cdr exp)))
                 (if (symbol? head)
                       (let ((value (find-value head env)))
                          (cond ((primitive? value) (cons value (map do-encode tail)))
                                ((fixed? value)     (cons value (apply-encoder value tail)))
                                (else               (cons head  (map do-encode tail)))))
                    (cons head (map do-encode tail))))))
      (bind do-encode
           (lambda (item)
              (encoder item env)))
      (bind apply-encoder 
           (lambda (fixed tail)
              (let ((action (fixed-encoder fixed)))
                 (if (nil? action)
                       (map do-encode tail)
                    (application action tail env)))))
      (cond ((pair? exp) (encode-list exp env))
            (else        exp))))

##
## evaluator modelled after (apply.c:eval)
##
(define (evaluator exp env)
   (let (do-eval)
      (bind do-eval
           (lambda (item)
              (evaluator item env)))
      (cond ((forced? exp) (forced-value exp))
            ((symbol? exp) (find-value exp env))
            ((pair? exp)   (let ((head (evaluator (car exp) env))
                                 (tail (cdr exp)))
                              (cond ((fixed? head) (let ((action (fixed-evaluator head)))
                                                      (application action tail env)))
                                    ((delay? head) (evaluator (cons (force head) tail) env))
                                    (else (application head (map do-eval tail) env)))))
            (else exp))))
            
##
##  application modelled after (apply.c:apply)
##
(define (application action args env)
   (let (eval-begin)
      (bind eval-begin 
            (lambda (body context)
               (if (nil? (cdr body))
                     (evaluator (car body) context)
                  (evaluator (car body) context)
                  (eval-begin (cdr body) context))))
      (cond ((primitive? action) (apply action args env))
            ((lambda? action)    (let ((defn    (element action 0))
                                       (closure (element action 1)))
                                    (let ((formals (element defn 0))
                                          (body    (element defn 1)))
                                       (eval-begin body (make-bindings formals args closure))))))))
                                    
