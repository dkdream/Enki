--- Design Choices -------------------------------------------
--- Type/Sorts -----------------------------------------------
Types are collections of values
Sorts are collections of types 
 
  o. 'arrow' the type of simple lambda
      signature: [type_group type_group] -> type
      (arrow Integer String)        -- collection of all functions from Integers        to Strings
      (arrow [Integer String] Unit) -- collection of all functions from Integers,String to Unit
      (arrow Unit [Integer String]) -- collection of all thunks that returns Integer,String

  o. 'refine' the type of a refined value
      signature [type predicte] -> type
      (refine Integer (lambda val (>= val 0))) -- positive integers

  o. 'index' the type of a tuple slot
     signature [Integer type] -> type
     (index 5 Integer) -- (refine Tuple (lambda val ((>= val.size 5) && (iso val.type[5] Integer))))
     (index 1 String)  -- (refine Tuple (lambda val ((>= val.size 1) && (iso val.type[5] String))))

  o. 'label' the type of a record slot
     signature [Integer type] -> type
     (label 'foo Integer) -- (refine Record (lambda val ((val.has 'foo) && (iso val.type['foo] Integer))))
     (label 'bar String)  -- (refine Record (lambda val ((val.has 'var) && (iso val.type['bar] String))))

  o. 'any' the union of the two types
     signature [type type] -> type
     (any Integer String) -- collection of all (Integers or  Strings) (union)

  o. 'all' the intersection of the two types
     signature [type type] -> type
     (all Integer String) -- collection of all (Integers and Strings) (intersection)
     (all (label 'foo Integer) (label 'bar String))

  o. 'power'

--------------------------------------------------------------


--- Type Predicates ------------------------------------------

--------------------------------------------------------------

- Sort is the collection of all sorts
- Type is the collection of all types in all sorts

(define Pair (lambda [x Type y Type] (all (label 'car x) (label 'cdr y))))

(define List (lambda [x Type] (mu [tail Type] (or (Pair x tail) Unit))))

(define length (lambda [x (exists [y Type] (List y))] [as Integer]
                  (if (type? x Unit) 
                    0
                    (+ 1 (length x.cdr)))))

--------------------------------------------------------------

(List Integer)
 -> ((lambda [x Type] (mu [tail Type] (any (Pair x tail) Unit))) Integer)
 -> (mu [tail Type] (any (Pair Integer tail) Unit))
 -> (any (Pair Integer (mu [tail Type] (any (Pair Integer tail) Unit))) Unit)

(type? length) 
  -> (arrow (exists [y Type] (List y)) Integer)


(exists [y Type] (List y))
 -> (exists [y Type] ((lambda [x Type] (mu [tail Type] (any (Pair x tail) Unit))) y))
 -> (exists [y Type] (mu [tail Type] (any (Pair y tail) Unit)))
 -> (exists [y Type] (any (Pair y (mu [tail Type] (any (Pair y tail) Unit))) Unit)

Q == (mu [tail Type] (any Unit (Pair y tail)))

 -> (exists [y Type] (any Unit (Pair y Q)))
 -> (exists [y Type] (any Unit (all (label 'car y) (label 'cdr Q))))
