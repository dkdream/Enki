/*-*- mode: c;-*-*/
/***************************
 **
 ** Project: *current project*
 **
 ** Routine List:
 **    <routine-list-end>
 **/

#include "treadmill.h"
#include "all_types.inc"
#include "node.h"

#include <stdio.h>


int main(int argc, char **argv)
{
    printf("bits per word %zu\n", BITS_PER_WORD);
    printf("size of word %zu\n", WORD_SIZE);
    printf("size of unsigned long %zu\n", sizeof(unsigned long));
    printf("size of long %zu\n", sizeof(long));
    printf("size of pointer %zu\n", POINTER_SIZE);
    printf("size of header %zu\n", sizeof(struct gc_header));
    printf("size of treadmill %zu\n", sizeof(struct gc_treadmill));
    printf("size of Node %zu\n", sizeof(Node));
    printf("size of Target %zu\n", sizeof(Target));
    printf("size of Reference %zu\n", sizeof(Reference));
    printf("size of HashCode %zu\n", sizeof(HashCode));
    printf("size of Size %zu\n", sizeof(Size));

    Header    header = 0;
    Reference reference   = 0;

    printf("offset state %ld\n",  (long)(&(header->state)));
    printf("offset space %ld\n",  (long)(&(header->space)));
    printf("offset before %ld\n", (long)(&(header->before)));
    printf("offset after %ld\n\n",  (long)(&(header->after)));
    printf("offset to Reference %ld\n", (long)(header + 1));
    printf("offset to Header %ld\n\n", (long)(((Header)(reference)) - 1));

    Node node = (Node)((Reference)(header + 1));

    printf("offset to Node.reference %ld\n", (long)(node.reference));
    printf("offset to Node.pair %ld\n", (long)(node.pair));
    printf("offset to Node.pair->car %ld\n", (long)(&(node.pair->car)));
    printf("offset to Node.pair->cdr %ld\n", (long)(&(node.pair->cdr)));
    printf("offset to Node.tuple->item[0] %ld\n", (long)(&(node.tuple->item[0])));
    printf("offset to Node.tuple->item[1] %ld\n", (long)(&(node.tuple->item[1])));

    return 0;
}

