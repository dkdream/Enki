;;; -*- mode: enki; -*-
(level 1)

(define list (lambda args args))

(dumpln '(lambda (fooness . bar) body))

(define %define    define)
(define %dump      dump)
(define %form      form)
(define %print     print)
(define %type-of   type-of)
(define oop-at     %element)
(define set-oop-at %element)
(define cons       %cons)

(define %error
  (lambda args
    (set error abort)
    (%print "\nERROR: ")
    (apply %print args)
    (%print "\n")
    (abort)))

(define error
  (lambda args
    (set error %error)
    (%print "\nerror: ")
    (apply print args)
    (%print "\n")
    (abort)))

(define pair? (lambda (x) (= (type-of x) 'pair)))

(define car  (lambda (x)
               (if (pair? x)
                   (oop-at x 0))))

(define cdr  (lambda (x)
               (if (pair? x)
                   (oop-at x 1))))

(define caar (lambda (x) (car (car x))))
(define cadr (lambda (x) (car (cdr x))))
(define cdar (lambda (x) (cdr (car x))))
(define cddr (lambda (x) (cdr (cdr x))))
(define caddr (lambda (x) (car (cdr (cdr x)))))
(define cdddr (lambda (x) (cdr (cdr (cdr x)))))
(define cadddr (lambda (x) (car (cdr (cdr (cdr x))))))

(define concat-list
  (lambda (x y)
    (if (pair? x)
        (cons (car x) (concat-list (cdr x) y))
      y)))

(define expand-quote
    (let ((qq-list) (qq-element) (qq-object))
      (set qq-list (lambda (l)
                     (if (pair? l)
                         (let ((obj (car l)))
                           (if (and (pair? obj) (= (car obj) 'unquote-splicing))
                               (if (cdr l)
                                   (list 'concat-list (cadr obj) (qq-list (cdr l)))
                                 (cadr obj))
                             (list 'cons (qq-object obj) (qq-list (cdr l)))))
                       (list 'quote l))))
      (set qq-element (lambda (l)
                        (let ((head (car l)))
                          (if (= head 'unquote)
                              (cadr l)
                            (qq-list l)))))
      (set qq-object (lambda (object)
                       (if (pair? object)
                           (qq-element object)
                         (list 'quote object))))
      qq-object))

(define quasiquote (form expand-quote))


(define %define-with (lambda (%define)
                       (lambda (pattern . body)
                         (if (pair? pattern)
                             (let ((name (car pattern))
                                   (args (cdr pattern)))
                               `(,%define ,name (lambda ,args ,@body)))
                             (let ((name pattern)
                                   (args (car body))
                                   (other (cdr body)))
                               (if (pair? other)
                                   `(,%define ,name (lambda ,args ,@other))
                                   `(,%define ,name ,@body)))))))

(define %define-kind (lambda (%define %kind)
                       (lambda (pattern . body)
                         (if (pair? pattern)
                             (let ((name (car pattern))
                                   (args (cdr pattern)))
                               `(,%define ,name (,%kind (lambda ,args ,@body))))
                             (let ((name pattern)
                                   (args (car body))
                                   (other (cdr body)))
                               (if (pair? other)
                                   `(,%define ,name (,%kind (lambda ,args ,@other)))
                                   `(,%define ,name (,%kind ,@body))))))))

(%define define (form (%define-with %define)))
(%define macro  (form (%define-kind %define %form)))

(macro (begin . body)
  `(let () ,@body))

(define (list-length list)
  (if (pair? list)
      (+ 1 (list-length (cdr list)))
    0))

(define (%list->array list index)
  (if (pair? list)
      (let ((a (%list->array (cdr list) (+ 1 index))))
        (set-array-at a index (car list))
        a)
      (array index)))

(define (list->array list)
  (%list->array list 0))

(define (map function list)
  (if (pair? list)
      (let ((head (function (car list))))
        (cons head (map function (cdr list))))))

(define (map-with function list a)
  (if (pair? list)
      (let ((head (function (car list) a)))
        (cons head (map-with function (cdr list) a)))))

(define (map2-with function alist blist a)
  (if (pair? alist)
      (let ((head (function (car alist) (car blist) a)))
        (cons head (map2-with function (cdr alist) (cdr blist) a)))))

;;; let*
(define (%let* bindings body)
  (if (pair? (cdr bindings))
      `(let (,(car bindings)) ,(%let* (cdr bindings) body))
    `(let ,bindings ,@body)))

(macro (let*  bindings . body)
  (%let* bindings body))

;;; letrec
(define (%letrec bindings body)
  (let ((vars '()) (settings '()) (entry '()) (result '()))
    (while (pair? bindings)
      (set entry    (car bindings))
      (set bindings (cdr bindings))
      (if (pair? entry)
          (let ()
            (set vars     (cons (list (car entry) '()) vars))
            (set settings (cons (cons 'set entry) settings)))))
    `(let ,vars ,@settings ,@body)))

(macro (letrec bindings . body)
  (%letrec bindings body))

;;; when
(macro (when test . body)
  `(if ,test (let () ,@body)))

;;; cond

(define (%cond clauses)
  (if (pair? clauses)
      (let* ((clause (car clauses))
             (test   (car clause))
             (value  (cadr clause)))
        (if (= 'else test)
            value
          `(if ,test ,value ,(%cond (cdr clauses)))))))

(macro (cond . clauses) (%cond clauses))

;;; iteration

(macro (for var-init-limit-step . body)
  (let ((var       (car    var-init-limit-step))
        (init      (cadr   var-init-limit-step))
        (limit     (caddr  var-init-limit-step))
        (step  (or (cadddr var-init-limit-step) 1)))
    `(let ((,var ,init) (_limit_ ,limit))
       (while (< ,var _limit_)
         ,@body
         (set ,var (+ ,var ,step))))))

(macro (list-do var list . body)
  `(let ((_list_ ,list))
     (while _list_
       (let ((,var (car _list_))) ,@body)
       (set _list_ (cdr _list_)))))

;;; conversion

(define (array->string arr)
  (let* ((ind 0)
         (lim (array-length arr))
         (str (string lim)))
    (while (< ind lim)
      (set-string-at str ind (array-at arr ind))
      (set ind (+ 1 ind)))
    str))

;;; assq

(define (assq object list)
  (let ((result ()))
    (while (pair? list)
           (if (= object (caar list))
               (let ()
                 (set result (car list))
                 (set list ())))
           (set list (cdr list)))
    result))

;;; concat

(define (concat-string x y)
  (let ((a (string-length x))
        (b (string-length y)))
    (let ((s (string (+ a b)))
          (i 0)
          (j 0))
      (while (< i a)
             (set-string-at s j (string-at x i))
             (set i (+ i 1))
             (set j (+ j 1)))
      (set i 0)
      (while (< i b)
             (set-string-at s j (string-at y i))
             (set i (+ i 1))
             (set j (+ j 1)))
      s)))

(define (concat-symbol x y)
  (string->symbol (concat-string (symbol->string x) (symbol->string y))))
