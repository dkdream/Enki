;;; -*- mode: enki; -*-
(level 1)

(define list (lambda args args))

(dumpln '(lambda (fooness . bar) body))

(define %define    define)
(define %dump      dump)
(define %form      form)
(define %print     print)
(define %type-of   type-of)
(define oop-at     %element)
(define set-oop-at %element)

(define %error
  (lambda args
    (set error abort)
    (%print "\nERROR: ")
    (apply %print args)
    (%print "\n")
    (abort)))

(define error
  (lambda args
    (set error %error)
    (%print "\nerror: ")
    (apply print args)
    (%print "\n")
    (abort)))

(define pair? (lambda (x) (= (type-of x) 'pair)))

(define cons (lambda (x y) 
               (let ((val (allocate 4 2)))
                 (set-oop-at val 0 x)
                 (set-oop-at val 1 y)
                 val)))

(define car  (lambda (x)
               (if (pair? x)
                   (oop-at x 0))))

(define cdr  (lambda (x)
               (if (pair? x)
                   (oop-at x 1))))

(define caar (lambda (x) (car (car x))))
(define cadr (lambda (x) (car (cdr x))))
(define cdar (lambda (x) (cdr (car x))))
(define cddr (lambda (x) (cdr (cdr x))))
(define caddr (lambda (x) (car (cdr (cdr x)))))
(define cdddr (lambda (x) (cdr (cdr (cdr x)))))
(define cadddr (lambda (x) (car (cdr (cdr (cdr x))))))

(define concat-list
  (lambda (x y)
    (if (pair? x)
        (cons (car x) (concat-list (cdr x) y))
      y)))

(define expand-quote
    (let ((qq-list) (qq-element) (qq-object))
      (set qq-list (lambda (l)
                     (if (pair? l)
                         (let ((obj (car l)))
                           (if (and (pair? obj) (= (car obj) 'unquote-splicing))
                               (if (cdr l)
                                   (list 'concat-list (cadr obj) (qq-list (cdr l)))
                                 (cadr obj))
                             (list 'cons (qq-object obj) (qq-list (cdr l)))))
                       (list 'quote l))))
      (set qq-element (lambda (l)
                        (let ((head (car l)))
                          (if (= head 'unquote)
                              (cadr l)
                            (qq-list l)))))
      (set qq-object (lambda (object)
                       (if (pair? object)
                           (qq-element object)
                         (list 'quote object))))
      qq-object))

(define quasiquote (form expand-quote))


(define %define-with (lambda (%define)
                       (lambda (pattern . body)
                         (if (pair? pattern)
                             (let ((name (car pattern))
                                   (args (cdr pattern)))
                               `(,%define ,name (lambda ,args ,@body)))
                             (let ((name pattern)
                                   (args (car body))
                                   (other (cdr body)))
                               (if (pair? other)
                                   `(,%define ,name (lambda ,args ,@other))
                                   `(,%define ,name ,@body)))))))

(define %define-kind (lambda (%define %kind)
                       (lambda (pattern . body)
                         (if (pair? pattern)
                             (let ((name (car pattern))
                                   (args (cdr pattern)))
                               `(,%define ,name (,%kind (lambda ,args ,@body))))
                             (let ((name pattern)
                                   (args (car body))
                                   (other (cdr body)))
                               (if (pair? other)
                                   `(,%define ,name (,%kind (lambda ,args ,@other)))
                                   `(,%define ,name (,%kind ,@body))))))))

(%define define (form (%define-with %define)))
(%define macro  (form (%define-kind %define %form)))

(macro (begin . body)
  `(let () ,@body))

(define (list-length list)
  (if (pair? list)
      (+ 1 (list-length (cdr list)))
    0))

(define (%list->array list index)
  (if (pair? list)
      (let ((a (%list->array (cdr list) (+ 1 index))))
        (set-array-at a index (car list))
        a)
      (array index)))

(define (list->array list)
  (%list->array list 0))

(define (map function list)
  (if (pair? list)
      (let ((head (function (car list))))
        (cons head (map function (cdr list))))))

(define (map-with function list a)
  (if (pair? list)
      (let ((head (function (car list) a)))
        (cons head (map-with function (cdr list) a)))))

(define (map2-with function alist blist a)
  (if (pair? alist)
      (let ((head (function (car alist) (car blist) a)))
        (cons head (map2-with function (cdr alist) (cdr blist) a)))))

;;; let*
(define (%let* bindings body)
  (if (pair? (cdr bindings))
      `(let (,(car bindings)) ,(%let* (cdr bindings) body))
    `(let ,bindings ,@body)))

(macro (let*  bindings . body)
  (%let* bindings body))

;;; letrec
(define (%letrec bindings body)
  (let ((vars '()) (settings '()) (entry '()) (result '()))
    (while (pair? bindings)
      (set entry    (car bindings))
      (set bindings (cdr bindings))
      (if (pair? entry)
          (let ()
            (set vars     (cons (list (car entry) '()) vars))
            (set settings (cons (cons 'set entry) settings)))))
    `(let ,vars ,@settings ,@body)))

(macro (letrec bindings . body)
  (%letrec bindings body))

;;; when
(macro (when test . body)
  `(if ,test (let () ,@body)))

;;; cond

(define (%cond clauses)
  (if (pair? clauses)
      (let* ((clause (car clauses))
             (test   (car clause))
             (value  (cadr clause)))
        (if (= 'else test)
            value
          `(if ,test ,value ,(%cond (cdr clauses)))))))

(macro (cond . clauses) (%cond clauses))

;;; iteration

(macro (for var-init-limit-step . body)
  (let ((var       (car    var-init-limit-step))
        (init      (cadr   var-init-limit-step))
        (limit     (caddr  var-init-limit-step))
        (step  (or (cadddr var-init-limit-step) 1)))
    `(let ((,var ,init) (_limit_ ,limit))
       (while (< ,var _limit_)
         ,@body
         (set ,var (+ ,var ,step))))))

(macro (list-do var list . body)
  `(let ((_list_ ,list))
     (while _list_
       (let ((,var (car _list_))) ,@body)
       (set _list_ (cdr _list_)))))

;;; conversion

(define (array->string arr)
  (let* ((ind 0)
         (lim (array-length arr))
         (str (string lim)))
    (while (< ind lim)
      (set-string-at str ind (array-at arr ind))
      (set ind (+ 1 ind)))
    str))

;;; assq

(define (assq object list)
  (let ((result ()))
    (while (pair? list)
           (if (= object (caar list))
               (let ()
                 (set result (car list))
                 (set list ())))
           (set list (cdr list)))
    result))

;;; concat

(define (concat-string x y)
  (let ((a (string-length x))
        (b (string-length y)))
    (let ((s (string (+ a b)))
          (i 0)
          (j 0))
      (while (< i a)
             (set-string-at s j (string-at x i))
             (set i (+ i 1))
             (set j (+ j 1)))
      (set i 0)
      (while (< i b)
             (set-string-at s j (string-at y i))
             (set i (+ i 1))
             (set j (+ j 1)))
      s)))

(define (concat-symbol x y)
  (string->symbol (concat-string (symbol->string x) (symbol->string y))))

;;; type information

(define %type-names     (array 16))
(define %last-type      -1)

(define (%allocate-type name)
    (set %last-type (+ 1 %last-type))
    (set-array-at %type-names %last-type name)
    %last-type)

(define (name-of-type type)
  (array-at %type-names type))

;;; structure

(define %structure-sizes        (array))
(define %structure-fields       (array))

;;; (name field offset) ->  (macro (name-field self) (list 'oop-at self offset))
(define (%make-accessor name fields offset)
  (if fields
      (let* ((member (car fields))
             (others (cdr fields))
             (getter (concat-symbol name (concat-symbol '- member)))
             (setter (concat-symbol 'set- getter)))
        `((macro (,getter self)       (list 'oop-at self ,offset))
          (macro (,setter self value) (list 'set-oop-at self ,offset value))
          ,@(%make-accessor name others (+ 1 offset))))))

(define (%make-accessors name fields)
  (%make-accessor name fields 0))

(macro (define-structure name fields)
  (let ((type (%allocate-type name))
        (size (list-length fields)))
    (set-array-at %structure-sizes  type size)
    (set-array-at %structure-fields type fields)
    `(let ()
       (define ,name ,type)
       ,@(%make-accessors name fields))))

(define (new type)
  (allocate type (array-at %structure-sizes type)))

;;; built-in types
;;;     must match the order in boot-eval.c:475)
;;;     must match the layout in boot-eval.c:477-485
(define-structure <undefined>   ())
(define-structure <long>        (_bits))
(define-structure <string>      (size _bits))
(define-structure <symbol>      (_bits))
(define-structure <pair>        (head tail))
(define-structure <_array>      ())
(define-structure <array>       (_array))
(define-structure <expr>        (defn env))
(define-structure <form>        (function))
(define-structure <fixed>       (function))
(define-structure <subr>        (_imp _name))

;;; selector

(define-structure <selector> (name methods default))

(define (selector name default)
  (let ((self (new <selector>)))
    (set-<selector>-name    self name)
    (set-<selector>-methods self (array))
    (set-<selector>-default self default)
    self))

(define (<selector>-add-method self type method)
  (set-array-at (<selector>-methods self) type method))

(macro (define-selector name . default)
  (or default (set default `(args (error "cannot apply selector "',name
                                         " to "(array-at %type-names (type-of (car args)))
                                         ": "(cons (car args) (map name-of-type (map type-of (cdr args))))))))
  (let ((objname (concat-symbol name '-object))
        (message name))
    `(let () 
       (define ,objname (selector ',name (lambda ,@default)))
       (define (,message . arguments)
         (let* ((self ,objname)
                (action (or (array-at (<selector>-methods self) (type-of (car arguments)))
                            (<selector>-default self))))
           (apply action arguments)))
       )))

(define (%add-method selector type args body)
  (let ((index (eval type)))
    (<selector>-add-method selector (eval type) (eval `(lambda ,args ,@body)))))

(macro (define-method selector type args . body)
  (let ((objname (concat-symbol selector '-object)))
    (if (symbol? args)
        `(%add-method ,objname ',type ',(cons 'self args) ',body)
        `(%add-method ,objname ',type '(self ,@args) ',body))))

;;; print

(define-selector do-print (arg) (%print arg))
(define-selector do-dump  (arg) (do-print arg))

(define (print . args)
  (while (pair? args)
    (do-print (car args))
    (set args (cdr args))))

(define (dump . args)
  (while (pair? args)
    (do-dump (car args))
    (set args (cdr args))))

(define (println . args)
  (apply print args)
  (%print "\n"))

(define (dumpln . args)
  (apply dump args)
  (%print "\n"))

(define-method do-dump  <string>   () (%dump self))
(define-method do-print <selector> () (print "<selector " (<selector>-name self) ">"))

(define-method do-print <pair> ()
  (if (= *globals* (cdr self))
      (print "*globals*")
    (let ()
      (print "(")
      (while self
        (if (pair? self)
            (print (car self))
          (let ()
            (print ". ")
            (print self)))
        (if (set self (cdr self))
            (print " ")))
      (print ")"))))

(define (dump-until target arg)
  (let ((found (= target arg)))
    (if (pair? arg)
        (let ()
          (print "(")
          (while arg
            (if (pair? arg)
                (if (dump-until target (car arg))
                    (let ()
                      (if (cdr arg) (print " ..."))
                      (set found 't)
                      (set arg ())))
              (let ()
                (print ". ")
                (dump-until target arg)))
            (if (set arg (cdr arg))
                (print " ")))
          (print ")"))
      (print arg))
    found))

(define (*backtrace* stack depth)
  (let ((posn (array)))
    (while (>= (set depth (- depth 1)) 0)
      (let ((here (array-at stack depth)))
        (print "  " depth "\t")
        (dump-until posn here)
        (print "\n")
        (set posn here))))
  (exit 0))

;;; multimethod

(define-structure <generic> (name methods default))

(define (generic name default)
  (let ((self (new <generic>)))
    (set-<generic>-name    self name)
    (set-<generic>-methods self (array))
    (set-<generic>-default self default)
    self))

(define (%generic-action self arg)
  (let ((method (<generic>-methods self)))
    (while arg
      (set method (array-at method (type-of (car arg))))
      (set arg (cdr arg)))
    (if (and method (not (array? method)))
        method
        (let ((default (<generic>-default self)))
          (if default
              default
              (lambda arguments
                (error "no method in " (<generic>-name self) " corresponding to " arguments)))))))

(define-method do-print <generic> () (print "<multimethod:" (<generic>-name self) ">"))

(macro (define-generic name . default)
  (or default (set default `(args (error "no method in  " ',name " corresponding to: " args))))
  (let ((objname (concat-symbol name '-object))
        (message name))
    `(let ()
       (define ,objname (generic ',name (lambda ,@default)))
       (define (,message . arguments)
         (let* ((self ,objname)
                (action (%generic-action self arguments)))
           (apply action arguments)))
       )))

(define (%add-multimethod mm types method)
  (if types
      (let ((methods (or (<generic>-methods mm)
                         (set-<generic>-methods mm (array 32)))))
        (while (cdr types)
          (let ((type (eval (car types))))
            (set methods (or (array-at methods type)
                             (set-array-at methods type (array 32)))))
          (set types (cdr types)))
        (set-array-at methods (eval (car types)) method))
      (set-<generic>-methods mm method)))

(macro (define-multimethod method typed-args . body)
  (let ((objname (concat-symbol method '-object)))
    (let ((args  (map cadr typed-args))
          (types (map car  typed-args)))
      `(%add-multimethod ,objname (list ,@types) (lambda ,args ,@body)))))

(warn "end of bool.l\n")
