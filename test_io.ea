(require "blank.ea")

(let ((out (open-out "test.io.out")))
   (fprint out "one" "two" "three")
   (close-out out)
   (let ((in (open-in "test.io.out"))) 
      (let ((line (read-line in)))
         (assert (iso 10 true (eof-in in)))
         (close-in in)
         (assert (iso 10 "onetwothree" line)))))


(let ((out (open-out "test.io.out")))
   (fprint out "one" "two" "three" "\n")
   (close-out out)
   (let ((in (open-in "test.io.out"))) 
      (let ((line (read-line in)))
         (assert (iso 10 "onetwothree\n" line))
         (assert (iso 10 nil (eof-in in)))
         (set line  (read-line in))
         (assert (iso 10 nil line))
         (assert (iso 10 true (eof-in in)))
         (close-in in)
         )))

(let ((out (open-out "test.io.out")))
   (fprint out "(one two three)")
   (close-out out)
   (let ((in (open-in "test.io.out"))) 
      (let ((data (read-sexpr in)))
         (assert (iso 10 '(one two three) data))
         (assert (iso 10 nil (eof-in in)))
         (set data  (read-line in))
         (assert (iso 10 nil data))
         (assert (iso 10 true (eof-in in)))
         (close-in in)
         )))

(let ((data (format "  movl $@{q}, %eax" -536870912)))
   (assert (iso 10 "  movl $\"-536870912\", %eax" data)))

(print "done\n")

