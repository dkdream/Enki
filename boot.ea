
(define cadr (lambda (x) (car (cdr x))))
(define cddr (lambda (x) (cdr (cdr x))))

(define concat-list (lambda (x y)
                       (if (pair? x)
                             (cons (car x) (concat-list (cdr x) y))
                          y)))

(define expand-quote
   (let (qq-list qq-element qq-object)
      (set qq-list (lambda (l)
                      (if (pair? l)
                            (let ((obj (car l))
                                  (rst (cdr l)))
                               (if (and (pair? obj)
                                        (== (car obj) 'unquote-splicing))
                                     (let ((value (cadr obj)))
                                        (if rst
                                              (list 'concat-list value (qq-list rst))
                                           value))
                                  (list 'cons (qq-object obj) (qq-list rst))))
                         (list 'quote l))))
      (set qq-element (lambda (l)
                         (let ((head (car l)))
                            (if (== head 'unquote)
                                  (cadr l)
                               (qq-list l)))))
      (set qq-object (lambda (object)
                        (if (pair? object)
                              (qq-element object)
                           (list 'quote object))))
      qq-object))

(define quasiquote (form expand-quote))

(define %define-with (lambda (%define)
                        (lambda (pattern . body)
                           (if (pair? pattern)
                                 (let ((name (car pattern))
                                       (args (cdr pattern)))
                                    `(\%define \name (lambda \args \@body)))
                              `(\%define \pattern \@body)))))

(define %define-kind (lambda (%define %kind)
                        (lambda (pattern . body)
                           (if (pair? pattern)
                                 (let ((name (car pattern))
                                       (args (cdr pattern)))
                                    `(\%define \name (\%kind (lambda \args \@body))))
                              `(\%define \pattern (\%kind \@body))))))

(define expand-define (%define-with define))
(define expand-set    (%define-with set))
(define expand-macro  (%define-kind define form))

(define define (form expand-define))
(define set    (form expand-set))
(define macro  (form expand-macro))

(define (map-with function list a)
   (let ((action (lambda (val) (function val a))))
      (map action list)))

(define (map2-with function alist blist a)
   (if (pair? alist)
         (let ((head (function (car alist) (car blist) a)))
            (cons head (map2-with function (cdr alist) (cdr blist) a)))))

## (rec var exp) -> (let ([var '()]) (set! var exp))
(macro (rec var exp)
   `(let ((\var '())) (set \var \exp)))

## (recur f ([var init] ... ) exp ... ) -> ((rec f (lambda (var ... ) (begin exp ... ))) init ... )
(macro (recur name bindings . body)
   (let ((vars (map car binding))
         (vals (map cdr binding)))
      `((rec \name (lambda vars \@body)) \@vals)))

## (when test exp ... ) -> (if test (begin exp ... ) '())
(macro (when test . body)
   `(if \test (begin \@body) '()))

## (unless test exp ... ) -> (if test '() (begin exp ... ))
(macro (unless test . body)
   `(if \test '() \@body))

## (record (var ... ) (val ...) exp ... ) -> (apply (lambda (var ... ) (begin exp ... )) val)
(macro (record vars vals . body)
   `(apply (lambda \vars \@body) vals))

(define (expand-cond clauses)
   (if (pair? clauses)
         (let ((head (car clauses))
               (tail (cdr clauses)))
            (if (pair? head)
                  (let ((test (car head))
                        (seq  (cdr head)))
                     (if (== test 'else)
                           `(begin \@seq)
                        (if (pair? seq)
                              `(if \test 
                                     (begin \@seq)
                                  (cond \@tail))
                           `(or \test (cond \@tail)))))))))

(macro (cond . clauses)
   (expand-cond clauses))


(define (expand-case key clauses)
   (let ((name (gensym)))
      (let ((convert (lambda (pair)
                        (if (pair? pair)
                              (let ((list (car pair))
                                    (body (cdr pair)))
                                 (if (== member 'else)
                                       `(else (begin \@body))
                                    `((member \name '\list) (begin \@body))))))))
         `(let ((\name \key))
             (cond \@(map convert clauses))))))

(macro (case key . clauses)
   (expand-case key clauses))

