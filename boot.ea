(define pair? (lambda (x) (= (type-of x) 'pair)))

(define car (lambda (x)
              (if (pair? x)
                  (element x 0)
                  nil)))

(define cdr (lambda (x)
              (if (pair? x)
                  (element x 1)
                  nil)))

(define cadr (lambda (x) (car (cdr x))))
(define cddr (lambda (x) (cdr (cdr x))))

(define concat-list (lambda (x y)
                      (if (pair? x)
                          (cons (car x) (concat-list (cdr x) y))
                          y)))

(define list-length (lambda (list)
                      (if (pair? list)
                          (+ 1 (list-length (cdr list)))
                          0)))

(define (%list->array list index)
  (if (pair? list)
      (let ((result (%list->array (cdr list) (+ 1 index))))
        (element result index (car list))
        result)
      (allocate index)))

(define list->array (lambda (list) (%list->array list 0)))

(define expand-quote
  (let ((qq-list) (qq-element) (qq-object))
    (set qq-list (lambda (l)
                   (if (pair? l)
                       (let ((obj (car l)))
                         (if (and (pair? obj) (= (car obj) 'unquote-splicing))
                             (if (cdr l)
                                 (list 'concat-list (cadr obj) (qq-list (cdr l)))
                                 (cadr obj))
                             (list 'cons (qq-object obj) (qq-list (cdr l)))))
                       (list 'quote l))))
    (set qq-element (lambda (l)
                      (let ((head (car l)))
                        (if (= head 'unquote)
                            (cadr l)
                            (qq-list l)))))
    (set qq-object (lambda (object)
                     (if (pair? object)
                         (qq-element object)
                         (list 'quote object))))
    (lambda (expr)
      (qq-object expr))))

(define quasiquote (form expand-quote))

(define %define-with (lambda (%define)
                       (lambda (pattern . body)
                         (if (pair? pattern)
                             (let ((name (car pattern))
                                   (args (cdr pattern)))
                               `(,%define ,name (lambda ,args ,@body)))
                             `(,%define ,pattern ,@body)))))

(define %define-kind (lambda (%define %kind)
                       (lambda (pattern . body)
                         (if (pair? pattern)
                             (let ((name (car pattern))
                                   (args (cdr pattern)))
                               `(,%define ,name (,%kind (lambda ,args ,@body))))
                             `(,%define ,pattern (,%kind ,@body))))))

(define expand-define (%define-with define))
(define expand-macro  (%define-kind define form))

(define define (form expand-define))
(define macro  (form expand-macro))

(macro (begin . body)
  `(let () ,@body))

(define (map function list)
  (if (pair? list)
      (let ((head (function (car list))))
        (cons head (map function (cdr list))))))

(define (map-with function list a)
  (if (pair? list)
      (let ((head (function (car list) a)))
        (cons head (map-with function (cdr list) a)))))

(define (map2-with function alist blist a)
  (if (pair? alist)
      (let ((head (function (car alist) (car blist) a)))
        (cons head (map2-with function (cdr alist) (cdr blist) a)))))

;;; let*
(define (expand-let* bindings body)
  (if (pair? (cdr bindings))
      `(let (,(car bindings)) ,(expand-let* (cdr bindings) body))
      `(let ,bindings ,@body)))

(macro (let* bindings . body)
  (expand-let* bindings body))



