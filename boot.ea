(define lambda (fixed %lambda %encode-lambda))
(define let    (fixed %let    %encode-let))
(define if     (fixed %if))
(define and    (fixed %and))
(define or     (fixed %or))
(define set    (fixed %set))
(define delay  (fixed %delay))

(define cadr (lambda (x) (car (cdr x))))
(define cddr (lambda (x) (cdr (cdr x))))

(define concat-list (lambda (x y)
                       (if (pair? x)
                             (cons (car x) (concat-list (cdr x) y))
                          y)))

(define expand-quote
   (let ((qq-list) (qq-element) (qq-object))
      (set qq-list (lambda (l)
                      (if (pair? l)
                            (let ((obj (car l))
                                  (rst (cdr l)))
                               (if (and (pair? obj)
                                        (== (car obj) 'unquote-splicing))
                                     (let ((value (cadr obj)))
                                        (if rst
                                              (list 'concat-list value (qq-list rst))
                                           value))
                                  (list 'cons (qq-object obj) (qq-list rst))))
                         (list 'quote l))))
      (set qq-element (lambda (l)
                         (let ((head (car l)))
                            (if (== head 'unquote)
                                  (cadr l)
                               (qq-list l)))))
      (set qq-object (lambda (object)
                        (if (pair? object)
                              (qq-element object)
                           (list 'quote object))))
      qq-object))

(define quasiquote (form expand-quote))

(define %define-with (lambda (%define)
                        (lambda (pattern . body)
                           (if (pair? pattern)
                                 (let ((name (car pattern))
                                       (args (cdr pattern)))
                                    `(\%define \name (lambda \args \@body)))
                              `(\%define \pattern \@body)))))

(define %define-kind (lambda (%define %kind)
                        (lambda (pattern . body)
                           (if (pair? pattern)
                                 (let ((name (car pattern))
                                       (args (cdr pattern)))
                                    `(\%define \name (\%kind (lambda \args \@body))))
                              `(\%define \pattern (\%kind \@body))))))

(define expand-define (%define-with define))
(define expand-macro  (%define-kind define form))

(define define (form expand-define))
(define macro  (form expand-macro))

(macro (begin . body)
   `(let () \@body))

(define (map function list)
   (if (pair? list)
         (let ((head (function (car list))))
            (cons head (map function (cdr list))))))

(define (map-with function list a)
   (if (pair? list)
         (let ((head (function (car list) a)))
            (cons head (map-with function (cdr list) a)))))

(define (map2-with function alist blist a)
   (if (pair? alist)
         (let ((head (function (car alist) (car blist) a)))
            (cons head (map2-with function (cdr alist) (cdr blist) a)))))

### let*
(define (expand-let* bindings body)
   (if (pair? (cdr bindings))
         `(let (\(car bindings)) \(expand-let* (cdr bindings) body))
`(let \bindings \@body)))

(macro (let* bindings . body)
   (expand-let* bindings body))



